/*----------------------------------------------------------------------------*/
2019-02-18 日志
/*----------------------------------------------------------------------------*/
接到任务：在3399 7.1SDK上实现 uvc设备


1.????4.2 编译模式

SDK 默认以 userdebug 模式编译。
使用 adb 时，需要先执行 adb root ，adb disable-verity 关闭 system 分区的 verity
特性，重启后再执行 adb root, adb remount， 进而进行 push 操作来 debug。

2.生效编译环境 
	source javaenv.sh       java -version jdk8-open
	source build/envsetup.sh

	cd u-boot
	make rk3399_defconfig
	???make ARCHV=aarch64


	cd kernel
	make ARCH=arm64 rockchip_defconfig -j8
	make ARCH=arm64 rk3399-sapphire-excavator-edp.img -j12



	android编译：
	source build/envsetup.sh
	lunch rk3399_all-userdebug
	make -j12
	./mkimages.sh
	完成编译后，执行SDK根目录下的mkimage.sh后在rockdev/Image-xxx/目录下生成完成 
	的固件包（xxx是具体lunch的产品名）

15:13 j18编译
16:28 编译成功

板子给工程师借走了
/*----------------------------------------------------------------------------*/




11.3.2 jiffies的回绕
	和任何C整形一样，当jiffies的值超过最大存放范围就会溢出。
	这里有很多发生溢出的可能，我们只分析其中之一，考虑如果在设置完timeout变量后,
	jiffies重新回绕为0，所以jiffies这时肯定会小于timeout的值。jiffies这时的值肯定
	会小于timeout的值。jiffies本该是个非常大的数据
	-----大于timeout，但是因为超过了它的最大值，所以反而变成了一个很小的值--也许
	仅仅只有几个节拍计数。由于发生了回绕，所以if判断语句的结果刚好相反。

	幸好，内核提供了四个宏来帮助比较节拍计数，它们能正确的处理节拍计数回绕情况。
	这些宏定义在文件<linux/jiffies.h>中

	其中unkown参数通常是jiffies，known参数是需要对比的值。
	宏time_after(unknown, known)当时间没有超过指定的known时，返回真，否则返回
	假，宏time_before(unknown, known),当时间nuknow没有超过指定的know时，返回真
	否则返回假

	所以前面的例子可以造成时间--回绕--安全。
	的版本，形式如下：

	/* 0.5s 后超时 */
	unsigned long timeout = jiffies + HZ/2;

	if(time_before(jiffies, timeout))
	{
		/**/
		if(time_before(jiffies, timeout)){
			/* 没有超时，很好 */
		}else{
			/* 超时了，发生错误 */
		}

		如果你对这些宏能避免因为回绕而产生的错误感到好奇的话，你可以试一试对这
		这两个参数取不同的值。


11.3.3 用户空间和HZ
	在2.6版本以后的内核中，如果改变了内核中HZ的值，会给用户空间中某些程序造成
	异常结果。这是因为内核是以节拍数/秒的形式给用户空间导出这个值的，在这个接
	口稳定了很长一段时间后，应用程序便逐渐依赖这个特定的HZ值了。所以如果在内核
	中更改了HZ的定义值，就打破了用户空间的常量关系----用户空间并不知道新的HZ值
	，所以用户空间可能认为系统运行时间已经是20个小时了，但实际上系统仅仅启动了
	两个小时。
		要想避免上面的错误内核必须更改所有导出的jiffies值，因而内核定义了USER_HZ
	来代表用户空间看到的HZ值。在X86体系结构上，由于HZ值原来一直是100，所以USER_HZ
	就定义为100.内核可以使用函数jiffies_to_clock_t()(定义在kernel/time.c中)将一个由
	HZ表示的节拍计数转换成由USER_HZ表示计数。所采用的表达式取决于USER_HZ和HZ是否为
	整数倍，而且USER_HZ是否小于等于HZ。如果这两个条件都满足，对绝大多数系统来说
	通常也能够满足，则表达式相当简单：
	return x/(HZ/USER_HZ)

	如果不是整数倍关系，那么该宏就得用到更为复杂的算法了。
	最后还是要说明，内核使用函数jiffies_64_to_clock_t()将64位的jiffies值的单位
	从HZ转换为USER_HZ
	
	在需要把以节拍数/秒为单位的值导出到用户空间时，需要使用上面的这几个函数。
	比如：
	unsigned long start
	unsigned long total_time

	start = jiffies

	/* 执行一些任务 */
	total_time = jiffies -start;

	用户空间期望HZ =
		USER_HZ,但是如果它们不相等，则由宏完成转换，这样的结果自然是皆大欢喜。
	说实话，上面的例子看到起来是挺简单的，如果以秒为单位而不是节拍为单位，输出
	信息会执行得更好一些。比如像下面这样

11.4 硬时钟和定时器
		体系结构提供了两种设备进行计时-------一种是我们前面讨论过的系统定时器
	另一种是实时时钟。

11.4.1 实时时钟
	实时时钟（RTC）是用来持久存放系统时间的设备，即便系统关闭后，它也可以靠主板上的
	微型电池提供的电力保持系统的计时。在PC体系结构中，RTC和CMOS集成在一起，而RTC
	的运行和BIOS的保存设置都是通过同一个电池来供电的。

	当系统启动时，内核通过读取RTC来初始化墙上时间，该时间存放在xtime变量中。虽然
	内核通常不会在系统启动后再读取xtime变量，但是有些体系结构会周期性地将当前时间
	存回RTC中。尽管如此，实时时钟最主要的作用仍是启动时初始化xtime变量。

11.4.2 系统定时器
	系统定时器是内核定时机制中最为重要的角色。
	尽管不同体系结构中定时器实现不尽相同，但是系统定时器的根本思想并没有区别--
	提供一种周期性触发中断机制。
	有些体系结构是通过对电子晶振进行分频来实现系统定时器，还有此体系结构则提供
	一个衰减测量器中断。无论哪种情况，其效果都一样。

	在X86体系结构中，主要采用可编程中断时钟（PIT）.PIT在PC机器中普遍存在，而且从
	DOS时代，就开始以它作为时钟中断源了。内核在启动时，对PIT进行编程初始化，使
	其能够以HZ/秒的频率产生时钟中断(中断O)。虽然PIT设备很简单，功能也有限，但它
	足以满足我们的需求。x86体系结构中的其他的时钟资源还包括本地APIC时钟和时间
	戮计数（TSC）等。

11.5 时钟中断处理程序
	现在我们已经理解了HZ，jiffies等待概念以及系统定时器功能。下面将分析时钟中断
	处理程序是如何实现的。时钟中断处理程序可以划分为两个部分：体系结构相关部分和
	体系结构无关部分。
		与体系结构相关的例程作为系统定时器的中断处理程序而注册到内核中，以便在产生
		时钟中断时，它能够相应地运行，虽然处理程序的具体工作依赖于特定的体系结构，
	但是绝大多数处理程序最低限度也要执行如下工作：
		*获取xtime_lock锁???，以便对访问jiffies_64和墙上时间xtime进行保护。
		*需要时应答或重新设置系统时间。
		*周期性地使用墙上时间更新实时时钟。
		*调用体系结构无关的时钟例程：tick_periodic()
		中断服务程序主要通过调用与体系结构无关的例程，tick_periodic()执行下面
		更多的工作：

		*给jiffies_64变量增加1
		(这个操作即使是在32位体系结构上也是安全的。因为前面已经获得了xtime_lock锁)
		

		*更新资源消耗统计值。比如当前进程所消耗的系统时间和用户时间。
		*执行已经到期的动态定时器
		*执行第4章讨论的sheduler_tick()函数(更新时间片)。
		*更新墙上时间，该时间存放在xtime变量中。
		*计算平均负载值。
		因为上述工作分别都由单独的函数负责完成，所以tick_periodic()例程的代码
		看起来非常简单。

		static void tick_periodic(int cpu)
		{
			if(tick_do_timer_cpu == cpu)
			{
				write_seqlock(&xtime_lock);

				/* 记录下一个节拍事件 */
				tick_next_period = ktime_add(tick_next_period, tick_period);
				do_timer(1);
				write_sequnlock(&xtime_lock);
			}

			updata_process_time(user_mode(get_irq_regs()));
			profile_tick(CPU_PROFILING);
		}

	很多重要的操作都在do_timer()和update_process_times()函数中进行。前者承担着
	对jiffes_64的实际增加操作：

	void do_timer(unsigned long ticks)
	{
		jiffies_64 += ticks;
		update_wall_time();
		calc_global_load();
	}

	函数update_wall_time(),顾名思义，根据流逝的时间更新墙上的时间，而calc_global_
	load()更新系统的平均负载统计值。当do_timer（）最终返回时，调用update_process_
	times()更新所耗费的各种节拍数。
	注意，通过user_tick区别是花费在用户空间还是内核空间。

	void update_process_times(int user_tick)
	{

	
	
	}

	回想一下tick_periodic(),user_tick的值是通过查看系统寄存器来设置的;
	update_process_times(user_mode(get_irq_regs()));


	account_process_tick()函数对进程的时间进行实质性更新：

	void account_process_tick(struct task_struct *p, int user_tick)
	{
		cputime_t one_jiffy_scaled = cputime_to_scaled(cputime_one_jiffy);
		struct rq *rq = this_rq();

		if(user_tick)
			account_user_time(p, cputime_one_jiffy, one_jiffy_scaled);
		else if(p != rq->idle,,,)
			account_system_time(p, cputime_one_jiffy, one_jiffy_scaled);
		else
			account_idle_time(p, cputime_one_jiffy, one_jiffy_scaled);
	}

	也许你已经发现了，这样做意味着内核对进程进行时间统计时，是根据中断发生时
	处理器所处的模式进行分类统计的，它把上一个节拍全部算给了进程。但是事实上进程
	在上一个节拍期间可能多次进入和退出内核模式，而且在上一个节拍期间，该进程也不
	一定是唯一一个运行进程。很不幸，这种粒度的进程统计方式是传统Unix所具有的，
	现在还没有更加精密的统计算法的支持，内核现在只能做到这个程序，这也是内核应该采用
	更高频率的另一个原因。

	接下来的run_lock_timers()函数标志了一个软中断去处理所有到期的定时器，在11.6
	节中将具体讨论定时器。
	最后scheduler_tick()函数负责减少当前运行进程的时间片计数值并且在需要时设置
	need_resched标志。在SMP机器中。该函数还要负责平衡每个处理器上的运行队列，这
	点在第4章曾经讨论过。

	tick_periodic()函数执行完毕后返回与体系结构相关的中断处理程序，继续执行后面的
	工作，释放xtime_lock锁，然后退出。

	以上全部工作第1/HZ秒都要发生一次，也就是说在X86机器上时钟中断处理程序每秒执行
	100次或者1000次。


	11.6 实际时间
	当前实际时间（墙上时间）定义在文件kernel/time/timekeeping.c中

	struct timespec xtime
	timespec数据结构定义在文件<linux/time.h>中，形式如下：

	struct timespec{
		_kernel_time_t tv_sec; /* 秒 */
		long tv_nsec;          /* ns */
	};
	xtime.tv_sec以秒为单位，存放着自1970年1月1日以来经过的时间，1970年1月1日被称为
	纪元

	xime.v_nsec记录自上一秒开始经过的ns数。
	???读写xtime需要使用xtime_lock锁，该锁不是变通自己旋锁而是一个seqlock锁，在
	第10章中曾讨论过seqlock锁。
	更新xtime首先要申请一个seqlock锁

	该循环不断重复，直到读者确认读取数据时没有写操作介入。如果发现循环期间有时钟
	中断处理程序更新xtime,那么read_seqretry()函数就返回无效序列号。
	从用户空间取得墙上赶时间的主要接口是gettimeeofday(),在内核中对应系统调用为sys
	_gettimeofday,定义位于kernel/time.c

	如果用户提供的tv参数非空，那么与体系结构相关的do_gettimeofday()函数将被调用。
	该函数执行的就是上面提到的循环读取xtime的操作。如果tz为空，就把系统时区
	返回用户。

	如果在给用户空间拷贝墙上赶时间或时区发生错误，该函数返回-EFAULT：如果成功，
	则返回0。

	虽然内核也实现了time()系统调用，但是gettimeofday()几乎完全取代了它。另外
	c库函数也提供一些墙上时间相关的库调用，比如ftime()和ctime().
	另外系统调用 settimeofday()来设置当前时间，它需要有CAP_SYS_TIME权能。
	除了更新xtime时间外，内核不会像用户空间程序那样频繁使用xtime。
	文件系统存放访问时间使xtime
	

11.7 定时器
定时器（有时也称为动态定时器或者内核定时器）是管理内核流逝的时间的基础。内核经常
需要推后执行某些代码，比如以前章节提到的下半部机制就是为了将工作放到以后执行。
之后这个概念很含糊，下半部的本意并非是放到以后的某个时间去执行任务，而仅仅是不
在当前时间执行就可以了。我们所需要的是一种工具，能够使工作在指定时间点上执行---不
长不短，不上好在希望的时间上，内核定时器正是解决这个问题的理想工具。

	定时器使用很简单。你只需要
	执行行一些初始化工作，设置一个超时时间，指定超时发生后执行的函数，然后激活
	定时器就可以了，指定的函数将在定时器到期时自动执行，注意定时器并不周期运行，
	它在超时后就自行撤销
	而且它的运行次数也不受限。定时器在内核中应用得非常普通。


11.7.1
	定时器由结构timer_list表示，定义在文件<Linux/timer.h>中。
	struct timer_list{
		struct list_head entry;
			..
	}
	
	幸运的是，使用定时器并不需要深入了解该数据结构。
		内核提供一组与定时器相关的接口用来简化管理定时器的操作，所有这些
		接口都声明在文件<linux/time.h>中大多数接口在kernel/timer.c中获得实现 

		创建定时器时需要先定义它：struct timer_list my_timer
		接着需要通过一个辅助函数来初始化定时器数据结构的内部值。初始化必须使用
		在其他定时器管理函数对定时器进行操作前完成。

		struct timer_list my_timer;
		init_timer(&my_timer);

		现在你可以填充结构中需要的值了：

		my_timer.expires = jiffies + delay;	
		my_timer.date = 0;
		my_timer.expires = my_function;	

		my_timer.expires表示超时时间，它是以节拍为单位的绝对计数值。如果当前计数
		等于大于my_timer.expires,那么my_timer.function指向处理处理函数就会开始
		执行，另外该函数还要使用长整型参数my_timer.data.
		所以正如我们从timer_list结构看到的形式，处理函数必须符合下面的函数原型：
		void my_timer_function(unsigned long data);
		data参数使用可以利用一个处理函数注册多个定时器，只需要通过该参数就能区别
			对待它们。如果你不需要这个参数，就可以简单地传递0给处理函数。

			最后你必须激活定时器：
			add_timer(&my_timer);

		大功告成,定时器可以工作了！但请注意时值的重要性。当前节拍计数等于或大于
		指定的超时，内核就开始执行定时器处理函数。
		虽然内核可以保证不会在超时时间到期前运行定时器处理函数，但是有可能延误定时
		器的执行。一般来说，定时器都在超时后马上就会执行，但是也有可能推迟到下一次
		时钟节拍时才能运行，所以不用定时器来实现任何硬实时任务。

			有时可能需要更改已经激活的定时器超时时间，所以内核通过mod_timer()来
			实现该功能，该函数可以改变指定的定时器时间：

			mod_timer(&my_timer, jiffies + new_delay); /* 新的定时值 */

			mod_timer()函数也可以操作那些已经初始化，但还没被激活的定时器
			未被激活，mod_timer()会激活它。如果调用时定时器未被激活，该函数返回0
			否则返回1.但不论哪种情况，一旦从mod_timer()函数返回，定时器都将被激活
			而且设置了新的定时器。

		如果需要在定时器超时前停止定时器，可以使用del_timer()函数：
		del_timer(&my_timer)

		被激活或未被激活的定时器都可以使用该函数，如果定时器还未被激活，该函数返回0
		否则返回1.注意，不需要为已经超时的定时器调用该函数，因为它们会自动删除。

	当删除定时器时，必须要注意一个潜在的竞争条件.当del_timer()返回后，可以保证的是
	定时器不会再被激活(也注是，将来不会执行),但是在多处理机器上定时器中断可能已经在其他处理器上运行了,所以删除定时器时需要等待可能在其他处理器上运行的定时器处理程序
	都退出，这时就要使用del_timer_sync()函数执行删除工作：

	del_timer_sync(&my_timer)

    和del_timer()函数不同，del_timer_sync()不能在中断上下文中使用。

11.7.2 定时器竞争条件
	因为定时器与当前执行代码是异步的，因此就有可能存在潜在的竞争条件。所以，首先
	绝不能用如下的代码替代mod_timer()函数，来改变定时器的超时时间。这样的代码在多
	处理机器上运行。为了防止这种情况的发生，应该调用del_timer_sync()函数，而不是
	del_timer()函数 。否则，对定时器执行删除操作后，代码会继续执行

	造成并发访问。最后，因为内核异步执行中断处理程序，所以应该重点保护定时器中断
	处理程序中共享数据。定时器数据的保护问题关第8和第9章讨论过。

11.7.3 实现定时器
	内核在时钟中断发生后执行定时器，定时器作为软中断在下半部门来说，时钟中断处理
	程序会执行update_process_times()函数，该函数随时调用run_local_times()函数:
	void run_local_timers(void)
	{
		hrtimer_run_queues();

		/* 执行定时器软中断 */
		raise_softirq(TIMER_SOFTIRQ);
		softlockup_tick();
	}

	run_timer_softirq()函数处理软中断TIMER_SOFTIRQ,从而在当前处理器上运行所有的
	超时定时器。

	虽然所有定时器都以链表形式存放在一起，但是让内核经常为了寻找超时定时器而遍历
	整个链表是不明智的。同样，将链表以超时时间进行排序也是很不明智的做法，因为这样
	一来在链表中插入和删除定时器都会很很费时。为了提高搜索效率，内核将按定时器它们
	的超时时间划分为五组。当定时器超时时间接近时，定时器将随组一起下移。采用分组
	定时器的方法可以在执行软中断的多数情况下，确保内核尽可能减少搜索超时定时器所
	带来的负担。因此定时器管理代码是非常高效的。



	
	
11.8 延时执行
	内核代码尤其是驱动程序)除了使用定时器或下半部机制以外，还需要其他方法来推迟
	执行任务。这种推迟通常发生在等待硬件完成
	某些工作时，而且等待的时间往往非常短，比如，重新设置网卡的的以太模式需要花费
	2ms，所以在设定网上速度后，驱动程序必须至少等待2ms才能继续运行。

		内核提供了许多延迟方法处理各种延迟要求，不同的方法有不同的处理特点，有些
	是在延迟任务时挂起处理器，防止处理器执行任何实际工作，另一些不会挂起处理器，
	所以也不能确保被延迟的代码能够在指定的延迟时间运行。

11.8.1 忙等待
	最简单的延迟方法(虽然通常也是不理想的办法)是忙等待（或者说忙循环）。但要注意
	该方法仅仅在想要延迟的时间是节拍的整数倍，或者精确率要求不高时才可以使用。
	忙循环实现起来很简单--在循环中不断旋转直到希望的时钟节拍数耗尽，比如：
	unsigned long timeout = jiffies + 10; /* 10个节拍 */
	while(time_before(jiffies, timeout));

	循环不断执行，直到jiffies大于delay为止，总共的循环时间为10个节拍。在HZ值等待
		1000的x86体系结构上，耗时为10ms。类似地：
		unsigned long delay = jiffies + 2*HZ; /* 2秒 */
		while(time_before(jiffies, delay));

		程序要循环等待2*HZ个时钟节拍，也就是说无论时钟节拍率如何，都要等待2s。
		对于系统的其他部分，忙循环方法算不上一个好办法。因为当代码等待时，
		处理器只能在原地旋转等待-------它不会去处理其他任何任务！事实上，你几乎
		不会用到这种低效率的办法，这里介绍它仅仅因为它是最简单直接的延迟方法。
		当然你也可能在那些蹩脚的代码中发现它的身影。
		更好的方法是在代码等待时，允许内核重新调度执行其他任务：

		unsigned long delay = jiffies +5*HZ;
		while(time_before(jiffies, delay))
			cond_resched();

		cond_resched()函数将调度一个新程序投入运行，但它只有在设置完need_resched
			标志后才能生效。换句话说，该方法有效的条件是系统中存在更重要的任务
			需要运行，注意，因为该方法需要调用调度程序，所以它不能在中断上下文
			中使用----只能在进程上下文中使用。事实上，所有延迟方法在进程上下文
		使用得很好，因为中断处理程序都应该尽可能快地执行（忙循环与这种）

		另外，延迟执行不管在那种情况下，都不应该在持有锁时或禁止中断时发生。
		事实上，没有方法能保证实际的延迟刚好等于延迟时间，虽然可以非常接近，
		但是最精确的情况也只能达到接近，多数情况都要长于指定时间。

			C语言的推崇者可能会问：什么能保证前面的循环已经执行了。C编译器通常
			只将变量装载一次。为了解决这个问题jiffies变量被标记为关键字volatile
		关键字volatile指示编译器在每次访问变量时都重新从主存中获得，而不是通过
		寄存器中的变量别名来访问，从而确保前面的循环能按预期的方式执行。

11.8.2短延迟
	有时内核代码(通常也是驱动程序)不但需要很短暂的延迟(比时钟节拍还短),而且
	还要求延迟的时间很精确。这种情况多发生在和硬件同步时，也就是说需要短暂等待
	某个动作的完成（等待时间小于1ms），所以不可能使用像前面例子中那种基于jiffies
	的延迟方法。对于频率为100HZ的时钟中断，它的节拍间隔甚至会10ms！即使使用1000HZ
	的时钟中断，节拍间隔也只能到1ms，所以我们必须寻找其他方法满足更短，更精确的延迟
	要求。
		幸运的是，内核提供了三个可以处理ms
		ns和ms级别的延迟函数，它们定义在文件<Linux/delay.h>和<asm/delay.h>中，可以

	看到它们并不使用jiffies:
	void udelay(unsigned long usecs)
	void mdelay(unsigned long usecs)
	void ndelay(unsigned long usecs)

	前一个函数利用忙循环将任务延迟指定的ms数后运行，后者延迟指定的ms数。众所周知
	1s等于1000ms 1000000us,这个函数用起来很简单。

	udelay(150);
		
	udelay()函数依靠执行次数循环次数达到延迟。
	因为内核知道处理器在1秒内能执行多少次循环，所以udelay()函数仅仅需要根据指定的
	延迟时间在1秒中占的比例，就能决定需要进行多少次循环即可达到要求的推迟时间。


	像其他忙等而延迟执行的方案，除非绝对必要，这两个函数都不应当使用。记住，持锁忙
	等或禁止中断是一种粗鲁的做法，因为系统响应时间和性能都会大受影响。不过
	如果你需要精确的延迟，这些调用是最好的办法。这些忙等函数主要用在延迟小的地方，
	通常在us范围内。


11.8.3 schedule_timeout()
	更理想的延迟执行方法是使用schedule_timeout()函数，该方法会让需要延迟执行的任务
	睡眠到指定的延迟时间耗尽后将重新运行。但该方法也不能保证睡眠时间正好等于指定的
	延迟时间，只能尽量使睡眠时间接近指定的延迟赶时间，当指定到期后，内核唤醒被延迟
	的任务并将其重新放回运行队列，用法如下：

	/* 将任务设置为可中断睡眠状态 */
	set_current_state(TASK_INTERRUPTIBLE);

	/* 小睡一会，s秒后唤醒 */
	schedule_timeout(s*HZ))

	唯一的参数是延迟相对时间,单位为jiffies，上例中将相应的任务推入可睡眠中断队列，
	睡眠s秒。因为任务处于可中断状态，所以如果任务收到信号将被唤醒。如果睡眠任务
	不想接收信号，可以将任务处于中断状态，所以如果任务收到信号被唤醒。如果睡眠不
	想接收信号，可以将任务状态设置为TASK_UNINTERRUPTIBLE,然后睡眠。注意在调用sche
	edule_timeout()函数前必须将任务设置成上面两种状态之一，否则任务
	不会睡眠。

	注意，由于schedule_timeout()函数需要调用程序，所以调用它的代码必须保证能够
	睡眠，简而言之，调用代码必须处于进程上下文中，并且不能持有锁。

	1.schedule_timeout的实现

	singed long schedule_timeout(signed long timeout)
	{
		timer_t timer;
		unsigned long expire;

		switch(timeout)
		{
		case MAX_SCHEDULE_TIMEOUT:
			schedule();
			goto out;
		default:
			if(timeout < 0)
			{
				current->state = TASK_RUNNIG;
				goto out;
			}
		}

		expire = timeout + jiffies;
		init_timer(&timer)
		timer.expires =expire;
		timer.date =(unsigned long)current;
		timer.function = process_timeout;

		add_timer(&timer);
		schedule();
		del_timer_sync(&timer);

		timeout = expire - jifffies;

	out:
		return timeout <0? 0:timeout;
	
	}

	建立一个定时器timer，接着激活定时器调用schedule().因为任务被
	标识为TASK_INTERRUPTTIBLE...,所以调度程序不会再选择该任务投入
	运行，而会选择其他新任务运行。
	当定时器超时时，process_timeout()函数会被调用：
	void process_timeout(unsigned long date)
	{
		wake_up_process((task_t *) date)
	}
	该函数将任务设置为TASK_RUNNIG状态，然后将其放入运行队列。
	当任务重新被调度时，将返回代码进入睡眠前的位置继续执行，如果任务提前
	被唤醒，那么定时器被撤销，process_timeout()函数返回剩余的时间。
	在switch中的代码是为了处理特殊情况而写的。正常情况不会用到他们。

	2.设置超时时间，在等待队列上睡眠
	第4章我们已经看到进程上下文中的代码为了等待特定事件发生，可以将自己放
	入等待队列，然后调用调度程序去执行新任务。一旦事件发生后，内核调用wake_up()
	函数唤醒在睡眠队列上的任务，使其重新投入运行。
	有时，等待队列上的某个任务可能既在等待一个特定事件到来。又在等待一个特定时间
	到期，就看谁来得更快，这种情况下，代码可以简单地使用schedule_timeout()函数
	代替schedule()函数，这样一样当希望的指定时间到期，任务都会被唤醒。当然代码需要
	检查被唤醒的原因。


11.9 小结
	在本章中，我们了考察了时间的概念，并知道了墙上时间与计算机的正常运行
	时间如何管理。
	我们对比了相对时间和绝对时间以及绝对事件与周期事件。我们还涵盖了诸如
	时钟中断，时钟节拍，HZ及jiffies等时间概念。

	我们考察了定时器的实现，了解了如何把这些用到自己的内核代码中。本章最后。
	我们浏览了开发者用于延迟的其他方法。

	你写的大多数内核代码都需要对时间及其走过的时间有一些理解。最大的可能是，只要你
	编写驱动程序，就需要处理内核定时器，与其让时间悄悄溜走还不如阅读这章。
	








