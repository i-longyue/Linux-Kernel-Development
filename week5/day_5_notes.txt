第15章 进程地址空间
1.linux内核简介
2.Linux内核出发
3.进程管理
4.进程调度
5.系统调用
6.内核数据结构
7.中断和中断处理
8.中断后半部推进
9.同步概念
10.同步方法
11.时间和定时器
12.内存管理
13.VFS虚拟文件系统
14.块I/O层
15.进程的地址空间

第12章 介绍了内核如何管理物理内存.其实内核除了管理本身内存外,还必须管理用户空间中进程的
内存.我们称这个内存为进程地址空间,也就是系统中每个用户空间进程所看到的内存

Linux操作系统调用采用虚拟内存技术,因此,系统中所有进程之间虚拟方式共享内存.对一个进程而言,
它好像都可以访问整个系统的所有物理内存.即使单独一个进程,它拥有的地址空间也远远大于系统
物理内存.本章将集中讨论内核如何管理进程地址空间.

15.1 地址空间
	进程地址空间可寻址的虚拟内存组成,而且更为重要的特点是内核允许进程使用这种虚拟内存
	中的地址.每个进程都有一个32位或者64位的平坦(flat)地址空间,空间的具体大小取决于体系
	结构.

	术语"平坦"指的是地址空间范围是一个独立的连续区间.一些操作系统提供了段地址空间,这种地址
	空间并非是一个独立的线性区域,而是被分段的.但现在采用虚拟内存的操作系统通常都使用平坦地址
	空间而不是分段式内存模式.

	每个进程都有唯一的这种平坦地址空间,一个进程的地址空间与另一个进程的地址空间即使有相同
	的内存地址,实际上也彼此互不相干.我们称这样的进程为线程.
		
	内存地址是一个给定的值,它要在地址空间范围之内,比如4021f000.这个值表示是进程32位地址空间
	中的一个特定的字节.尽管一个进程可以寻址4GB的虚拟内存,但这并不代表它就有权访问所有的虚拟
	地址.在地址空间中,我们更为关心的是一些虚拟内存的地址区间,比如0x8048000 0x804c000
	这些合法地址空间称为内存区域.
	
	进程只能访问有效内存区域内的内存地址.每个内存区域也具有相关权限如对进程可读可写可执行
	属性.如果一个进程访问了不在有效范围中的内存区域,或以不正确的方式访问了有效地址,那么内核
	就会终止该进程,并返回"段错误"信息.
	内存区域可以包含各种内存对象,比如:


	*可以执行文件代码内存映射,称为代码段.(text section)
	*可执行文件的已初始全局变量的内存映射,称为数据段.
	*包含未初始化全局变量,也就是BSS段的零页(页面中的信息全部0值,所以
			可用于映射bss段等目的)的内存映射.

	*用于进程用户空间栈的零页内存映射.
	*每个诸如C库或动态连接程序等共享库的代码段,数据段和bss也会被载入进程的地址空间.
	*

	*任何内存映射文件
	*任何共享内存段.
	*任何匿名的内存映射,比如malloc分配的内存.
	进程地址空间中的任何有效地址都只能位于唯一的区域,这些内存区域不能相互覆盖.
	可以看到,在执行的进程,每个不同的内存片段都对应一个独立的内存区域:栈,对象代码,
	全局变量,被映射的文件等.

15.2 内存描述符
	内核使用内存描述符结构体表示进程的地址空间,该结构包含了和进程空间有关的全部
	信息.内存描述符由mm_struct结构体表示,定义在文件<linux/sche.h>中.下面给出内存
	描述符和各个域的描述:
	struct mm_struct{
		....
		....
		....
		....
	}
	
	mm_users域记录正在使用该地址的进程数目.比如,如果两个线程共享该地址空间,那么
	mm_users的值便等于2:mm_count域是mm_struct结构体的主引用计数.所有的mm_users
	都等于mm_count的增加量.这样,在前面的例子中,mm_count就仅仅为1.
	如果有9个线程共享某个地址空间,那么mm_users将会是9
	当mm_users的值减为0时,mm_count域的值才变为0.当mm_count的值等于0,说明已经
	没有任何指向mm_struct结构体的引用了,这里该结构体会被撤销.当内核在一个地址
	空间上操作.并需要使用与该地址相关联的引用计数.内核便增加mm_count.内核同时
	使用这两个计数器是为了区别主使用计数器和使用该地址空间的进程的数目(mm_users)

	mmap和mm_rb这两个不同数据结构体描述的对象是相同的:
	该地址空间中的全部内存
	区域.但是前者以及链表形式存放而后者以红-黑树的形式存放.
	红-黑树是一种二叉树.与其他二叉树一样,搜索它的时间复杂度为O

	内核通常会避免使用两种数据结构组织同一数据,但此处内核这样的冗余确实派得上用场
	mmap结构体作为链表,利于简单,高效地遍历所有元素,而mm_rb结构体作为红--黑树
	更适合搜索结构体,而仅仅被包含其中.覆盖树上的链表并用这两个结构体同时访问相同
	的数据集,有时候我们此操作称作线索树.

15.2.1 分配内存描述符
	在进程描述符中,mm域存放着该进程使用的内存描述符,所以current->mm 便指向当前进程
	的内存描述符.

	fork()函数利用copy_mm()函数复制父进程的内存描述符,也就是current->mm域给其子进程
	而子进程中的mm_struct结构中实际是通过文件kernel/fork.c中的allocate_mm()宏从
	mm_cachep slab缓存中分配得到的.
	每个进程都有唯一的mm_struct结构体,即唯一的进程地址空间.

	如果父进程希望和其子进程共享地址空间,可以在调用clone()时,设置CLONE_VM标志.
	我们把这样的进程称作线程.回忆第章,是否共享地址空间的几乎是进程和Linux中所谓线程
	间本质的唯一区别.险此以外,Linux内核并不区别对待它们,线程对内核来说仅仅是一个
	共享特定资源的进程而已.

	当CLONE_VM被指定指定后,内核就不再需要调用allocate_mm()函数了,而仅仅需要在调用
	copy_mm()函数中将mm域指向其父进程的内存描述符就可以了;

	if(clone_flags & CLONE_VM){
		/* current是父进程而tsk在fork()执行期间是子进程 */
		atomic_inc(&current->mm->mm_users);
		tsk->mm = current ->mm;
	}
15.2.2 撤销内存描述符
	当进程退(ve)出时,内核会调用定义在kernel/exit.c中的exit_mm()函数,该函数执行
	一些常规的撤销工作.同时更新一些统计量.其中,该函数会调用mmput()函数减少内存
	描述符中mm_users用户计数,如果用户计数降到零,将调用mmdrop()函数,减少mm_count
	使用计数,如果使用计数也等于0了,说明内存描述符不再有任何使用者了,那么调用
	free_mm()宏通过kmem_cache_free()函数将mm_struct结构体归还到mm_cachep slab缓存中.

15.2.3 mm_struct与内核线程
	内核线程没有进程地址空间,也没有相关的内存描述符.所以内核线程对应的进程描述符中
	mm域为空.事实上,这也正是内核线程的真实含义----它们没有用户上下文.

	省了进程地址空间再好不过了,因为内核线程并不需要访问任何用户空间的内存(那它们
			访问谁的呢?)而且因为内核线程在用户空间中没有任何页,所以实际上它们
	并不需要有自己的内存描述符和页表.尽管如此,即使访问内核内存,内核线程也还是需要
	使用一些数据的.比如页表.为了避免内核线程为内存描述符和页表浪费内存,也为了当新
	内核线程运行时,避免浪费处理器周期向新地址空间进行切换,内核线程将直接使用前一个
	进程的内存描述符.


15.3  虚拟内存区域
	内存区域由vm_area_struct结构体描述,定义在文件<linux/mm_types.h>中.内存区域在
	Linux内核中也经常称作虚拟内存区域(virtual memoryAreas,VMAs)

	vm_area_struct结构体描述了指定地址空间内连续区间上的一个独立内存范围.
	内核将每个内存区域作为一个单独的内存对象管理,每个内存区域都拥有一致的属性,
	比如访问权限等,另外,相应的操作也都一致.按照这样的方式,第一个VMA就可以代表不同
	的内存区域
	(比如内存映射文件或者进程用户空间栈),这种管理方式类似于使用VFS层的面向对象
	方法,下面给出该结构定义和各个域的描述:

	每个内存描述符都对应于进程地址空间中唯一区间.vm_start域指向区间的首地址
	vm_end指向尾地址.vm_end - vm_start的大小便是内存区间的长度,内存区域的位置
	就在vm_start,vm_end之中.注意在同一个地址空间内的不同内存区间不能重叠

15.3.1 VMA标志
	VMA标志是一种位标志,其定义风linux/mm.h.它包含在vm_flags域内,标志了内存
	区域所包含的页面的行为和信息.和物理页的访问权限不同.vma标志反映了内核处理
	页面所需要遵守的行为准则,而不是硬件要求.
	而且,vm_flags同时也包含了内存区域中每个页面的信息,或内存区域的整体信息,而不是
	具体的独立页面.

	VM_READ

15.3.2 VMA操作
	vm_area_struct结构体中的vm_ops域指向与指定内存区域相关的操作函数表,内核使用
	表中的方法操作VMA.vm_area_struct作为通用对象代表了任何类型的内存区域,而操作
	描述针对特定的对象实例的特定方法
	操作函数表由vm_operations_struct结构体表示,定义在文件linux/mm.h中
	struct vm_operations_struct{
		...
	}
15.3.3 内存区域的树型结构和内存区域的链表结构
	上文讨论过,可以通过内存描述符中mmap和mm_rb域之一访问内存区域.
	其实包含完全相同的vm_area_struct结构体的指针,仅仅组织方法不同.

	mmap域使用单独链表连接所有内存区域对象.每一个vm_area_struct结构体通过自身的
	vm_next域被连入链表,所有区域按地址拉长的方向排序,mmap域指向链表中第一个内存
	区域,链中最后一个结构体指针指向空.

	mm_rb域使用红-黑树连接所有的内存区域对象,mm_rb域指向红-黑树根节点,地址空间中
	每一个vm_area_struct结构体通过自身的vm_rb域连接到树.

	内核为了内存区域上的各种不同操作都能获得高性能,所以同时使用了这两种数据结构.

15.3.4 实际使用中的内存区域
	可以使用/proc文件系统和pmap工具查看给定进程的内存空间和其中所含的内存区域
	我们可以来年一个非常简单的用户的用户空间例子

int main(void)
{
	return 0;
}

下面列出进程地址空间中包含的内存区域.

/proc/<pid>/maps的输出显示了该进程地址空间中的全部内存区域:

 前三行分别对应C库中lic.so的代码段,数据段,bss段.
 该进程的全部地址空间大约1340KB,但是只有地大约40K的区域是可写和私有的.如果一片内存
范围是共享的或不可写的,那么内核只需要在内存中为文件(backing file)保留一分映射.

	每个和进程相关的内存区域都对应一个vm_area_struct结构体.另外进程不同于线程,
	进程结构体stask_struct包含唯一的mm_struct结构体引用.

15.4 操作内存区域
	内核时常需要在某个内存区域上执行一些操作,比如某个指定地址是否包含在某个区域中

15.4.1 find_vma()
	为了找到一个给定的内存地址属于哪一个内存区域,内核提供了find_vma()函数.
	该函数在指定的地址空间中搜索第一个vm_end大于addr的内存区域.
	实践证明,被缓存的VMA会相当好的命中率30%-40%,而且被缓存的VMA速度会很快,如果指定的
	地址不在缓存中,那么必须搜索和内存描述符相关的所有内存区域.这种搜索通过红-黑树进行:

struct vm_area_struct *find_vma
{
	----
	----
	----
}
	

15.4.2 find_vma_prev()
	find_vma_prev()函数和find_vma()工作方式相同,但是它返回第一个小于addr的VMA.该函数定义和
	声明分别在文件mm/mmap.c中和文件linux/mm.h中:
	struct vm_area_struct *find_vma_prev(struct mm_struct *mm, unsigend long addr,
										 struct vm_area_struct **pprev)
	pprev参数码放指向先于addr的VMA指针.

15.4.3 find_vma_intersection()
	find_vma_intersection()函数抬第一个和指定区间相交的VMA.因为该函数是内联函数,所以定义
	在文件<linux/mm.h>中:
static inline struct vm_area_struct *
find_vma_intersection(struct mm_struct *mm
							unsigned long start_addr,
							unsigned long end_addr
						 )
{
	struct vm_area_struct *vma;
	vma = find_vma(mm, start_addr);

	if(vma && end_addr <= vma->start)
		vma = NULL;
	return vma;
}
	第一个参数mm是要搜索的地址空间,start_addr是区间的开始首位置,end_addr是区间的尾位置.
	显然,如果find_vma()返回NULL,那么find_vma_intersection()也会返回NULL.但是如果
	find_vma()返回有效的VMA,find_vma_intersection()只有在该VMA的起始位置于给定的地址区间
	结束位置之前,才将其返回.如果VMA的起始位置大于指定地址范围的结束位置,则该函数返回NULL

15.5 mmap()和do_mmap:创建地址区间
	内核使用do_mmap()函数创建一个新的线性地址区间.
	do_mmap()函数都会将一个地址区间加入进程的地址空间中--无论是扩展已存在的内存区域还是
	创建一个新的区域
	do_mmap()函数定义在文件linux/mm.h中
	unsigned long do_mmap(struct file *file, unsigned long addr,
							unsigned long len, unsigned long prot,
							unsigned long flag, unsigned long offset)
	
	如果系统调用do_mmap()的参数中有无效参数,那么它返回一个负值,否则,它会在虚拟内存中分配一个
	全程的新内存区域.
	在用户空间可以通过mmap系统调用获取内核函数do_mmap()的功能.
	mmap()系统调用定义如下:
	void *mmap2(void *start,
			size_t length,
			int prot,
			int fd,
			off_t pgoff)

15.6 mummap和do_mummap:删除地址区间
do_mummap()函数从特定的进程地址空间中删除指定地址区间
系统调用munmap()给用户空间程序提供了一种从自从地址空间中删除指定地址区间的方法,它和系统
调用mmap的作用相反,它是对do_mummap函数的一个简单封装

15.7 页表
	虽然应用程序操作的对象是映射到物理内存之上的虚拟内存,但是处理器直接操作的却是物理
	内存.所以当用程序访问一个虚拟地址时,首先必须将虚拟地址转化成物理地址,然后处理器才
	能解析地址访问请求.
	地址的转换工作需要通过查询页表才能完成,概括地讲,地址转换需要将虚拟地址分段,使每段虚拟
	地址都作为一个索引指向页表,而页表指向下一级别的页表或者指向最终的物理页面.


	linux中使用三级页表完成地址转换,利用多级页表能够节约地址转换需占用的存放空间.
	linux对所有体系结构,包括那些不支持三级页表的结构都使用三级页表管理,因为使用三级页表结构
	可以利用"最大公约数"

	顶级页表是全局目录(PGD),它包含了一个pgd_t类型数组,多数体系结构中pgd_t类型等同于无符号
	长整型类型.PGD中的表项指向二级页目录中的表项:PMD

	它是个pmd_t类型数组,其中表项指向PTE中的表项.
	最后一级的页表简称页表,其中包含pte_t类型的页表项,该页表项指向物理页面.
	多数体系结构中,搜索页表的工作是由硬件完成的.虽然通常操作中,很多使用页表的工作都可以由
	硬件执行,但是只有在内核正确设置页表的前提下,硬件才能方便的操作它们.

	每个进程都有自己的页表(当然,线程也会共享页表).内存中描述符的pgd域指向的就是进程的页
	全局目录.注意,操作和检索页表时必须使用page_table_lock锁,该锁在相应的进程内存描述符中
	

	由于每次对虚拟内存中的页面访问都必须先解析它,从而得到物理内存中对应地址.
	所以页表操作的性能非常关键.但不幸的是,搜索内存中的物理地址速度很有限,因此为了加快搜索,
	多数结构体都实现了一个翻译后缓冲器TLB
	TLB作为一个虚拟地址映射到物理地址的硬件缓存,当请求访问一个虚拟地址时,处理器将首先
	检`查TLB是否缓存了该虚拟地址到物理地址的映射.

	虽然硬件完成了有关页表的部分工作,但是页表的管理仍然是内核的关键部分-
	2.6版本内核对页表管理的主要改进是:从高端内存分配部分页表.
	今后可能的改进包括通过写时拷贝的方式共享页表.

	这种机制使得在fork()操作中可由父子进程共享页表.

15.8 这章的内容不能不说"难缠",我们看到了抽象出来的进程虚拟内存,看到
了内核


	














	


