
10.2 自旋锁最多只能被一个可执行线程持有.如果一个执行线程试图获得一个被已经
持有的自旋锁,那么该线程就会一直进行忙循环-旋转-等待锁重新可用要是锁未被急用,
请求锁的执行线程就可以立即得到它,继续执行.
  在任意时间,自旋锁都可以防止多于一个的执行线程同时进入临界区.
  同一个锁可以用在多个位置,例如,对于给定数据的所有访问都可以得到保护和同步
  
10.3 读-写自旋锁
10.4 信号量
	Linux中的信号量是一种睡眠锁.如果有一个任务试图获得一个不可用(已经被占用)
	的信号量时,信号量将其推进一个等待队列,然后让其睡眠.这时处理器能重获自由,
	从而去执行其他代码.当持有的信号量可用(被释放)后,处于等待队列中的那个任务
	将被唤醒,并获得该信号量.

	从信号量的睡眠特性得出一些有意思的结论:
	由于争用信号量的进程在等待锁重新变为可用时会睡眠,所以信号量适用于锁会被长
	时间持有的情况.

	*相反,锁被短时间持有时,使用信号量就不太适宜了.因为睡眠,维护等待队列以及
	唤醒所花费的开销可能比锁被占用的全部时间还要长.

	*由于执行线程在锁被急用时会睡眠,所以只能在进程上下文中才能获取信号量锁
因为在中断上下文件是不能进行调度的.
	*你可以在持有信号量时去睡眠(当然你也可能并不是需要睡眠),因为当其他进程
	试图获得同一信号量时不会因此死锁(因为该进程也只是去睡眠而已,而你最终会
	继续执行的).

	*在你占用信号量的同时不能占用自旋锁,因为在你等待信号量时可能会睡眠,而
	在持有自旋锁时是不允许睡眠的.

	以上这些结论阐明了信号量和自旋锁在使用上的差异.在使用信号量的大多数时候
	你的选择不大.

	往往在需要和用户空间同步时,你的代码会需要睡眠,此时使用信号量是唯一的选择
	.由于不受睡眠限制,使用信号量通常来说更简单一些.如果需要在自旋锁和信号量
	中做选择,应该根据锁被持有的时间的长短做判断.理想情况当然是所有的锁定操作
	都应该是已经快好,但如果你用的是信号量,那么锁定操定的时间长一点也能接受.
	另外,信号量不同于自旋锁,它不会禁止内核,所以持有信号量的代码可以被抢占.
	这意味着信号量不会对调度带来负面影响.

	10.4.1 计数信号量和二值信号量
	最后要讨论的是信号量的一个有用特性,它可以同时允许任意数据的锁持有者,而自
	旋锁在一个时刻最多允许一个任务持有它.
	
	
	信号量同时允许的持有者数量可以在声明
	信号量时指定.这个值称为使用者数量或者简单的叫数量.

	通常情况下,信号量和自旋锁一样,在一个时间仅允许有一个锁持有者.这样的信号
	量被称为二值信号量.(因为它或者由一个任务持有,或者根本没有任务持有它)
	或者称为互斥信号量(因为强制进行互斥).
	
	
	另一方面,初始化时也可以把数量设置为大于1的非0值.
	这种情况,信号量被称为计数信号量,它允许在一个时刻至多有count个锁持有者.

	计数信号量不用来进行强制互斥,因为它允许多个执行线程同时访问临界区.相反
	这种信号量用来对特定代码加以限制,内核中使用它的机会不多.在使用信号量时,
	基本上用到的都是互斥信号量(计数等于1的信号量)


	信号量支持两个原子操作P() V()测试(探查) -- 后者叫增加.
	down()操作对信号量计数减1来请求获得一个信号量.如果结果是0或大于0,获得
	信号量锁.

	up操作用来释放信号量,该操作也被称作是提升信号量,因为它会增加信号量的计数值
	量,该操作也被称作是提升信号量.



10.4.2 创建和初始化信号量
	信号量的实现是与体系结构相关的,具体实现定义在文件asm/semaphore..h
	struct semaphore类型用来表示信号量.可以通过以下方式静态地声明信号量--其中name是
	信号量变量名,count是信号量的使用数量.

	struct semaphore name;
	seam_init(&name, count);

	创建更为普通互斥信号量可以直接使用以下快捷方式,不用说,name仍然是互斥信号量的
	变量名:
	static DECLARE_MUTEX(name);

	更常用的情况是,信号量作为一个大数据结构的一部分动态创建.此时只有指向该动态
	创建的信号量的间接指针,可以使用如下函数来对它进行初始化.
	sema_init(sem, count);

	sem是指针,count是信号量的使用者数量.
	与前面类似,初始化一个动态创建的互斥信号量时使用如下函数
	init_MUTEX(sem);

	我不明白为什么"mutex"在init_MUTEX()中是大写,或者为什么"init"在这个函数名
	中放在前面,而在sema_init()中放在后面.

10.4.3 使用信号量
	函数dowm_interrupttible()试图获取指定的信号量 如果信号量不可用,它将把调用进程
	置成TASK_INTERRUPTIBLE状态--进入睡眠
	这种状态意味着任务可以被信号唤醒,如果进程在等待获取信号量的时候接收到了信号,那
	么该进程就会被唤醒,而函数down_interruptible()会返回-EINTR

	另外一个函数down()会让进程在TASK_UNINTERRUPTIBLE状态下睡眠
	
	使用down_try_lock()函数,你可以尝试以堵塞方式来获取指定的信号量.
	在信号量已被占用时,它立刻返回非0值;否则,它返回0,而且让你成功持有信号量锁.
	要释放指定的信号量,需要调用up()函数.例如:

	/* 定义并声明一个信号量,名字为mr_sem,用于信号量计数 */
if (down_interruptible(&mr_sem)) {
	/* 信号被接收,信号量还未获取 */
}

/* 临界区 */
	/* 释放给定的信号量  */

up(&mr_sem);


10.5 读-写信号量
	与自旋锁一样,信号量也有区分读-写访问的可能.
	与读写自旋锁和普通锁旋之间的关系差不多,读-写信号量更具优势

	读-写信号量在内核中是由rw_semaphore结构表示的.定义在文件 linux/rwsem.h
	通过以下语句可以创建静态声明的读-写信号量
	static DECLARE_RWSEM(name);

其中name是新-写信号量可以通过以下函数初始化:
	init_rwsem(struct rw_semaphore *sem);
	所有的读-写信号量都是互斥信号量--也就是说,它们的引用计数等于1,虽然它们只
	对写者互斥,不对读者.只要没有写者,并发持有锁的读者数不限.相反,只有唯一的写者
	(在没有读者时)可以获得写锁.所有读-写锁的睡眠都不会被信号打断,所以它只有一个
	版本的down()操作.例如:

	static DECLARE_RWSEM(mr_rwsem);

	/* 试图获取信号量用于读 */
	down_read(&mr_rwsem);

	/* 临界区只读 */

	/* 释放信号量 */
	up_read(&mr_rwesm);
	...

	/*.. 试图获取信号量用于写... */
	down_write(&mr_rwsem);

	/* 临界区(读和写) */

	/* 释放信号量 */
	up_write(&mr_sem);
	与标准信号量一样,读-写信号量也提供了down_read_trylock()和down_write_trylock()
	方法.这两个方法都需要一个指向读-写信号量的指针作为参数.如果成功获得了信号量锁.
	它们返回非0值;如果信号量锁被争用,则返回0,要小心这与普通信号量的情形完全相反.

	读-写信号量相比读-写自旋锁多一种特有的操作:downgrade_write().这个函数可以动态
	地将获取的写锁转为读锁.

	读-写信号量和读-写自旋锁一样,除非代码中的读和写可以明白无误地分割开来,否则最好
	不使用它.再强制一次,读-写机制使用是有条件的,只有在你的代码可以自然地界定出读-写
	时才有价值.


	10.6 互斥体
	直到最近,内核中唯一允许睡眠的锁是信号量.多数用户使用信号量只使用计数1,说白了是
	把其作为一个互斥的排他锁使用----好比允许睡眠的自旋锁.不幸的是,信号量用途更通用
	没多少使用限制.这点使得信号量适合用于那些复杂的,未明情况下的互斥访问,比如内核
	于用户空间复杂的交互行为.但是这也意味着简单的锁定而使用信号量并不方便,并且信号
	量也缺乏强制的规则来行使任何形式的自动调试,即使受限的调试也不可能.
	为了找到一个更简单睡眠锁,内核开发者们引入了互斥体(mutex)

	mutex在内核中对应数据结构mutex,其行为和作用计数为1的信号量类似
	DEFINE_MUTEX(name);

	动态初始化mutex,你需要做:
	mutex_init(&mutex);

	对互斥锁锁定和解锁并不难:
	/* mutex_lock(&mutex) */

	/* 临界区 */
	mutex_nulock(&mutex);

	看到了吧,它就是一个简化版的信号量,因为不再需要管理任何使用计数.
	表10-7是基本的mutex操作列表

	mutex的简洁高效性源于相比使用信号量更多的受限笥,它不同于信号量,因为mutex
	仅仅实现了Dijkstra设计初衷的最其中行为.因此mutex的使用场景相对而言更加严格
	..
	也许mutex结构中是有用的特色是:通过一个特殊的调试模式,内核可以

	10.6.1 信号量和互斥体
		互斥体和信号量很相似,内核中两者共存会令人混淆.所幸,它们的标准使用方式
	都有简单的规范:
	除非mutex的某个约定约束你使用,否则相比信号量你要优先使用mutex,当你写新代码时,只有
	碰到特殊场合(一般是很底层代码.
			因此建议首选是mutex,如果发现不能满足其约束条件,再考虑选择信号量)


	10.6.2
		了解何时使用自旋锁,何时使用互斥体(或者是信号量),
		因为在中断下下方中只能使用自旋锁,而在任务睡眠时只能使用互斥体

	10.7 完成变量
		如果内核中一个任务需要发出通知另一个任务发生了某个特定的事件,利用完成变量是
		使用两个任务得以同步的简单方法,如果一个任务要执行一些工作时,另一个任务就会在
		完成变量上等待.当这个任务完成工作后,会使用变成变量去唤醒在等待的任务.这听
		起来很一个信号量,事件上完成变量仅仅提供了代替信号量的一个简单的解决方法.
		例如,当子进程执行或者退出,vfork()系统调用使用完成变量唤醒了父进程.

		变成变量由结构completion linux/completion.h
		DECLARE_COMPLETION(mr_comp);

		通过init_completion()动态创建并初始化完成变量
		在一个指定的完成变量上,需要等待的任务调用wait_for_completion来等待特定事件.当
		特定事件发生后,产生事件的任务调用complete()来发送信号唤醒正在等待的任务.

		使用完成变量的例子可以参考kernel/sched.c和kernel/fork.c完成变量的通常用法是
		将完成变量作为数据结构中的一项动态创建,而完成数据结构初始化工作的内核代码将调用
		wait_for_completion()进行等待.初始化完成后,初始化函数调用completion()唤醒在
		等待的内核任务.

10.8 BLK:大内核锁
	BKL是一个全局自旋锁,使用它主要是为了方便实现从Linux最初SMP过滤到细粒度加锁机制.

	*持有BKL的任务仍然可以睡眠,因为当任务无法被调度时,所加锁自动被丢弃
	*BKL是一种递归锁,一个进程可以多次请求一个锁,并不会像自旋锁那样产生死锁现象.
	*BKL只可以用在进程上下文中.和自旋锁不同,你不能在中断上下文中申请BLK.
	*新的用户不允许使BLk

	对于BKL最主要的问题是确定BKL锁保护的到底是什么.多数情况下,BKL更像是保护代码
	而不是保护数据
	这个问题给利用自旋锁取代BKL造成很大困难

10.9 顺序锁 seq
	顺序锁,通常简称seq锁,是在2.6版本中才引入的一种新型锁.这种锁提供了一种简单的机制,用于
	用于读写共享数据.实现这种锁主要依靠一个序列计数器,当有疑义的数据被写入时,会得到
	一个锁,并且序列值会增加.在读取数据之前和之后.序列号都被读取.如果读取的序列号值
	相同,说明在读操作进行的过程没有被写操作打断过.此外如果


	在多个读者和少数写者共享一把锁的时候,seq锁有助于提供一种非常轻量级和具有可扩展
	性的外观.但是seq锁对写者更有利.只要没有其他写者,写锁总是能够被成功获得.读者不会
	影响写锁.另外挂起的写者会不断地使用读操作循环,直到不再见有任何写者持有锁为止.

	seq锁在你遇到如下需求时,将是最理解的选择:
	*你的数据存在很多读者
	*你的数据写者很少
	*
	*
	使用seq锁中最有说服力的是jiffies.该变量存储了Linux机器在Linux机器启动到当前的时间
	jiffies是使用一个64位的变量,记录了自系统启动以来的时钟节拍累加数.对于那些能自动读取
	全部64位变量,需要用get_jiffies_64(),实现用于seq锁

	10.10禁止抢占

	由于内核是抢占性的.内核中的进程在任何时刻都有可能停下来以便另一个具有更高优先权
	的进程运行,这意味着一个任务与抢占的任务可能会在同一个临界区内运行.为了避免这种
	情况,内核抢占代码使用自旋锁作为非抢占区域的标记.如果一个自旋锁被持有,内核便不能
	进行抢占.
	
	因为内核抢占和SMP面对相同的并发问题.并且内核已经是SMP安全的
	所以,这种简单的变化使得内核也是抢占安全的(preempt - safe)

	实际中,某些事件并不需要自旋转锁,但是仍然需要关闭内核抢占.
	最频繁出现的情况就是每个处理器上的数据.如果数据对每个处理器是唯一的,那么,这样的数据
	可能就不需要使用锁来保护,因为数据只能被一个处理器访问,如果自旋锁没有被持有,内核
	便不能进行抢占.因为内核抢占和SMP面对相同的并发问题,

	实际上某些情况不需要自旋锁,但是仍然需要关闭内核抢占.


	任务A对每个处理器中未被锁保护的变更foo进行操作
	任务A被抢占

	任务B被调度
	任务B操作变量foo
	任务B完成
	任务A被调度
	任务A继续操作变量foo

	这样即使这是一个单处理器计算机,变量foo也会被多个进程以伪并发的方式访问.
	为了解决这个问题,可以通过preemept_disable()禁止内核抢占.这是一个可以嵌套调用的函数
	.每次调用都必须有一个相应的preempt_enable()调用.当最后一次被调用后,内核抢占才是
	重新启用.

	preempt_disable()
	/* 抢占被禁止 */
	preempt_enable
	
	抢占计数存放着被持有锁的数量和preempt_disable()调用次数,如果计数是0,那么内核可以进行
	抢占,如果为1或者更大的数,那么内核就不会进行抢占.这个计数非常有用它是一种对原子操作和
	睡眠很有效的调用方法.


10.11 顺序和屏障
	当处理多处理器之间或硬件设备之间的同步问题时,有时需要在你的程序代码中指定的顺序发出读
	内存和写内存指令.

	在和硬件交互时,时常需要确保一个给定的读操作发生在其他读或写操作之前.另外,在多处理器上,
	可能需要按写数据的顺序来读数据.但编译器和处理器为了提高效率,可能对读和写重新排序

	幸好所有可能重新排序和写处理器提供了机器指令来确保顺序要求.同样也可以指示编译器不要对
	给定点周围的指令进行重新排序.这些确保顺序的指令称作屏障

	基本上,在某些处理器上存在以下代码:
	a=1;
	b=2;
	有可能会在a中存放新值之前就在b中存放新值
	编译器会按顺序,但是处理顺会重新动态排序.


	尽管上面的代码可能被重新排序,但是处理器和编译器绝不会对下面的代码重新排序
	a = 1;
	b = a;
	此处a和b均为全局变量,因为a与b之间有明确的数据依赖关系.
	但是不管是编译器还是处理器都不知道其他上下文相对代码.

	偶然情况下有必要让写操作被其他代码识别,也让所有的指定顺序之外的代码识别.这种情况常常
	发生在硬件设备上,但是在处理器机器上也很常见.

	rmb()方法提供了一个"读"内存屏障,它确跨越rmb()的载入动作不会发生重新排序

	wmb()方法提供了一个"写"内存屏障,这个函数和rmb()类似,区别仅仅是它针对存储而非载入

	mb()方法既提供了读屏障也提供了写屏障.载入和存储都不会跨越屏障重新排序

	read_barrier_depends()是rmb的变种,它提供了一个读屏障,但是仅仅是针对后续的读操作
	所依靠的那些载入.因为屏障后的读操作信赖于屏障前的读操作.因此,该屏障确保屏障前的读操
	基本上这是一个读屏蔽函数

	看看使用mb()和rmb()的一个例子,其中a的初始值是1,b的初始值是2.
	线程1           线程2
	a = 3;           __
	mb();            __
	b = 4;          c = b;
	__              rmb();
	__              d = a;
	


10.12 小结
	本章节应用了第九章的概念和原理,这使得你能理解Linux内核用于同步和并发的具体方法
	我们一开始先讲述了最简单的确保同步的方法--原子操作,然后考察了自旋锁,还是内核中
	最普通的锁,它提供了轻量级单独持有都的锁,即争用时忙等.我们接着还讨论了信号量(这是
	一种睡眠锁)以及更加通用的衍生锁====mutex.

	到于专用的加锁原语像完成变量/seq锁.只是稍稍提及.我们取笑BLK,考察禁止抢占,并理解了
	屏障,它曾难以驾驭.

	以第九章和第10章的同步方法为基础,就可以编写避免竞争条件.确保正确同步,而且能在
	多处理器上安全运动内核代码了.




	



















	

	 

