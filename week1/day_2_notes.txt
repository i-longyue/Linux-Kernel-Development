/*----------------------------------------------------------------------------*/
2019-02-19 日志

1.下载同步3288SDK
-- a.windows挂载Linux服务器来共享文件夹。
-- 在我的电脑上增加网络位置，需要共享的Linux服务器具有smaba功能。
-- 注意:连接101服务器的具体位置为\ly 100为\share

-- b.将从服务器100中下载到的SDK包上传到自己101的Linux服务器上。

-- c.解压缩 tar -zxvf xx.xx.gz(如果是.bz2为j)

-- d.检出，同步代码。
-- .repo/repo/repo sync -l   这个是从.repo文件中检出代码 checkout出来代码。 
-- .repo/repo/repo sync      这个是从服务器同步代码。

2.uboot编译步骤
	$make rk3288_defconfig
	$make
	编译完成后,u-boot根目录生成如RK3288UbootLoader_V2.19.09.bin的loader文件。

3.kernel编译步骤
	$make rockchip_defconfig
	$make rk3288-tb_8846.img 
	编译完成后，kernel 根目录，生成kernel.img，resource.img两个镜像文件。


4.Android 编译步骤
	$source build.sh
	$make -j4
	注意:有的服务器并没有编译android的java环境。之前分配的101没有这个环境，
	重新申请的108有。

--a.怀疑是build.sh javaenv.sh脚本没有同步的问题,里面有内容：
	export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
	export PATH=$JAVA_HOME/bin:$PATH
	export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/lib/tools.jar
	完成编译后，执行SDK根目录下的 mkimage.sh脚本生成固件，位于
	rockdev/Image-rk3288目录。

	注意:在建立服务器的过程中，windos可能挂载不了，可能是没有开samaber。
	
/*----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------*/
《Linux 内核设计与实现》 --读书笔记
在封面下有本书的主要内容:
-- 进程管理,进程调度,时间管理和定时器,系统调用接口,内存寻址,内存管理和页缓存,
-- VFs,内核同步以及调度技术
-- 及Linux2.6内核中颇具特色的内容：CFS调度程序,抢占式内核,块I/O以及I/O调度程序。

译者序
序言
前言
-- 我们注定要在对所有内核子系统有了全面的了解和认识后才能开始自己实践。
-- 但是却可以舍弃细枝末节，将行李压缩到最小，自然可以轻装快走，快速进入
-- 动手阶段,本书提供这样的全面了解。

-- 我可以写一本关于开发内核该做什么--更重要的是不做什么的书箱.
-- 从本质上说，这本书依旧是描述Linux内核是如何 设计和实现的，但是写法却另辟蹊径
-- 所提供 的写法更倾向于实用。通过本书，你就可以做一些内核开发工作了，并且是使用
-- 正确的方法去做。


使用这本书
-- 像所有的大型软件开发一样，要学习的东西确实不少，但不同之处在于数量上的积累，
-- 而非本质上的区别。

内核版本
-- 基于Linux2.6


读者范围
-- 本书是写给那些有志于理解Linux内核的软件开发者的，初衷是提供足够多的关于Linux
-- 内核设计和实现的信息，希望读过这本书的人能够有完备的知识，可以真正的开发内核
-- 代码。 
-- 本书覆盖了从核心内核系统的应用到内核设计与实现等各方面的内容。
-- 策略和机制分离的设计理念,确保了系统具有清晰的层次化结构。
(大部分的编程问题其实可以划分为两部分:" 提供什么能力"(机制,可以理解为接口程序) 
和 "如何使用这些能力"(策略应用程序)).
/*----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------*/
第一章：Linux内核简介

1.1 Unix的历史
1.2 追寻Linus足迹，Linux简介
-- Linux是类Unix系统,但是它不是Unix，需要说明的是尽管Linux借鉴了Unix的许多，并且
-- 实现了Unix的API,Linux系统的基础是内核，C库，工具集合和系统的基本工具。常见
-- Linux指的是内核。

1.3 操作系统和内核简介
-- 操作系统是在本书中负责完成最基本功能和系统管理的那些部分,这些部分应该包括内核
-- 设备驱动程序，启动引导程序，命令行Shell或者其他种类的用户界面，基本的文件管理
-- 工具和系统工具。

系统内核提供服务:
-- 像管理硬件设备，分配,系统资源等。内核有时候被称作管理者或者是操作系统核心。

内核组成：
-- 通常一个内核由负责响应中断的中断服务程序，负责管理多个进程从而分享处理器时间的
-- 调度程序，负责管理进程地址空间的内存管理程序和网络，进程间通信等系统服务程序
-- 组成。

保护机制：
-- 对于提供保护机制的现代系统来说，内核独立于普通应用程序。它一般处于系统态拥有受
-- 保护的内存空间和访问硬件设备的所有权限。这种系统态和被保护起来的内存空间，统称
-- 内核空间。相对的应用程序在用户空间执行，它们只允许它们使用部分系统资源当内核运
-- 行时系统以内核态进入内核空间执行，而执行一个普通用户程序时，系统将以用户态进入
-- 用户空间执行。

在系统中运行的应用程序通过系统调用来与内核通信:
-- 应用程序通常调用库函数(比如C库函数),再由库函数通过系统调用界面，让内核完成不
-- 同任务。

-- 当一个应用程序被执行一条系统调用，我们说内核正在代其执行。如果进一步解释，在这
-- 种情况下，应用程序被称为通过系统调用在内核空间运行,而内核被称为运行于进程上下 
-- 文中,这种交互关系-----应用程序通过系统调用界面陷入内核----是应用程序完成其工作
-- 的基本行为方式. 

内核还要负责管理系统的硬件设备：
-- Linux提供中断机制，当硬件设备想要和系统通信的时候，它首先要发出一异步中断信号
-- 去打断处理器的执行，继而打断内核的执行，中断对应一个中断号，内核通过这中断号查
-- 找相应的中断服务程序，并调用这个程序响应和处理中断。
-- 这些上下文代表着内核的活动范围。实际我们可以行每个处理器在任何指定时间点上的活
-- 动必然概括为下列三者之一:      ???


	应用程序1 应用程序2 应用程序3   
									用户空间					

			系统调用接口

		    内核子系统              内核空间	

			设备驱动程序


			                        硬件
-- .运行于用户空间，执行用户进程。
-- .运行于内核空间，处于进程上下文，代表某个特定的进程执行。
-- .运行于内核空间，处于中断上下文，与任何进程无关，处理某个特定的中断。
-- 以上包括所有情况，当CPU空闲时，内核运行空进程，处于进程的上下文，
-- 但运行于内核空间。
/*----------------------------------------------------------------------------*/


