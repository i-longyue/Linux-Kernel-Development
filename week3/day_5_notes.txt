    这两种实时算法都是静态优先级的。内核不为实时进程计算动态优先级。
这能保证给定优先级的实时进程总能抢占优先级比它低的进程。

Linux的实时调度算法提供了一种软实时的工作方式。软实时的含义是，内核调度
进程，尽力使进程在它的限定时间到来前运行，但内核不保证总能满足这些进程的
需求。相反，硬实时系统系统使进程在它的限定时间到来前运行，但内核不保证总
能满足这些进程的要求。相反，硬实时系统保证在一定条件下，可以满足任何调
度的要求。Linux对于实时任务的调度的要求。Linux对于实时任务的调度不做任何
保证。虽然不能保证实时工作方式，但Linux的实时调度算法的性能还是很不错的。
2.6版本的内核可以满足严格的时间要求。

实时优先范围从0到MAX_RT_PRIO减1。默认情况下，MAX_RT_PRIO为100----所以
默认的实时优先级范围是从0到99.

SCHED_NORMAL级进程的nice值共享了这个取值空间，它的取值范围从MAX_RT_PRIO
到MAX_RT_RRIO _+ 40。也就是说，在默认情况下，nice值从-20到+19直接对应的
是100到139的实时优先级范围。


4.8 与调度相关的系统调用
	linux提供了一个系统调用族，用于管理与调度程序相关的参数。这些系统
调用可以用来操作和处理进程优先级，调度策略及处理器绑定，同时还提供了显
式地将处理器交给其它进程的机制。
	许多书籍都提供了这些地系统调用它们都包含在c库中，没有什么太多的封装
基本上调用了系统调用而已的说明。表4-2列举了这些系统调用并给出了简短的说
明。第5章会讨论它们是如何实现的。

nice	                设置进程的nice值
sched_setscheduler      设置进程的调度策略


4.8.1 与调度策略和优先级相关的系统调用
	sched_setscheduler()sched_getscheduler()分别用于设置和获取进程的调度
	策略和实时优先级。与其的系统调用相似，它们的实现也是由许多参数检查，
	初始化和清理构成。其实最重要的工作在于读取或改写进程task_strtuct的
	policy和rt_priority的值。

	sched_setparam()和sched_getparam()分别用于设置和获取进程的实时优先级
	这两个系统调用获取封装在sched_get特殊结构体的rt_priority中。sheded_
	get_priority_max()和sched_get_priority_min()分别用于返回给定调度
	策略的最大和最小优先级，实时调度策略的最大优先级是MAX_USER_RT_PRIO
	减1，最小优先级等于1。

	对于一个普通进程，nice()函数可以将给定进程的静态优先级增加一个给定
	的量。只有超级用户才能在调用它时使用负值，从而提高进程的优先级。
	nice()函数会调用内核的set_ user_ nice()函数，这个函数会设置进程的
	task_struct的static_prio 和prio值。


4.8.2 与处理器绑定有关的系统调用
	linux调度程序提供强制的处理器绑定机制，也就是说，虽然它尽力通过一种
	软的(或者说自然的)亲和性保存在进程task_struct的cpus_allowed这个位掩码标
	志中。该标志中的每一位对应一个系统可用的处理器。默认情况下，所有的位
	都被设置，进程可以在系统中所有可用的处理器上执行。用户可以通过
	sched_setaffinity设置不同的一个或几个位组合的位掩码，而调用shed_getaffinity
	则返回当前的cpus_allowed位掩码。


4.8.3 放弃处理器时间
	Linux通过sched_yield()系统调用，提供了一种让进程显式地将处理器时间让给
	其它等待执行进程的机制。它是通过将进程从活动队列中(因为进程正在执行，所以
	位于此队列当中)移到过期队列中实现的。由此产生的效果不仅抢占了该进程并将其
	放入优先级队列的最后面，还将其放入过期队列中----这样能确保在一段时间内它
	都不会被再执行了。由于实时进程不会以过期，所以属于例外。它们只被移动到其
	优先级队列的最后面(不会放到过程队列中)。在Linux的早期版本中，sched_yield的
	语义有所不同，进程只会被放置到优先级队列的末尾，放弃的时间往往不会太长。
	现在,应用程序甚至内核代码在调用sched_yield()前，应考虑是否真的希望放弃处理
	器时间。
		内核代码为了方便，可以直接调用yield(),先要确定给定进程确实处于可
		执行状态，然后再调用shed_yield(),用户空间的应用程序直接使用sched_yield()
	系统调用就可以了。

4.9 小结
	进程调用程序是内核重要的组成部分，因为运行着的进程首先在使用计算机。然而，
	满足进程调度的各种需要绝不是轻而易举的。很难找到一刀的算法。既适合众多的可
	运行进程，又具有可伸缩性，还能在调度的周期和吞吐量之间求得平衡，同时还满足
	各种负载的需求。不过，Linux内核的新CFS调度程序尽量满足各个方面的需求，并以
	较完善的可伸缩性和新颖的方法提供了最佳的解决方案。
	前面的章节覆盖了进程管理的相关内容，本章则考察进程调度所遵循基本原理，具体实现
	调度算法以及目前Linux内核所使用的接口。第五章将涵盖内核提供给运行进程的主要接口
	----系统调用.

第五章
系统调用
在现代操作系统中，内核提供了用户进程与内核进行交互的一组接口。这些接口让应用程序受限
地访问硬件设备，提供了创建新进程并与已有进程进行通信的机制，也提供了申请操作系统其他
资源的能力。这些操口在应用和内核之间扮演了使者的角色，应用程序发出各种请求，而内核负
责满足这些请求(或者无法满足时返加一个错误)。实际上提供这些接口主要是为了保证系统稳定
可靠，避免应用程序恣意妄行。






5.1 与内核通信
	系统调用在用户空间和进程之间添加一个中间层。该层主要作用有三个。首先，它为用户空
间提供了一种硬件的抽象接口。第二，系统调用保证了系统的稳定和安全。作为硬件设备和应用
程序之间的中间人，内核可以基于权限，用户类型和其他一些规则对需要进行的访问进行裁决。






分析了uvc设备的枚举过程。

GetDescriptor(Device)
	80 06 00 01 00 00 12 00

	12 01 00 02 EF 02 01 40 08 19 10 23 00 01 01 02 00 01
	( vid 0x1908 pid 0x2310 )


GetDescriptor(configuration)
	80 06 00 02 00 00 c1 01

	configuration descriptor ->(bNumInterfaces = 4,  bconfigurationvalue = 1)
	09 02 c1 01 04 01 00 80 80

/*-----------------------------------------------------------------------------------------*/
	interface Association descriptor
	IAD是Interface Association Descriptor，功能是把多个接口定义为一个类设备。
	08 0b 00 02 0e 03 00 02  ->(binterfacecount = 2
			                    bFunctionClass  = video
								bFunctionSubClass = video interface collection)
/*-----------------------------------------------------------------------------------------*/



	interface descripter 
	09 04 00 00 01 0e 01 00 02 ->(bNumEndpoints = 1
								  bInterfaceClass video
								  bInterfaceSubClass Video Control
								  iInterface = 2
								 )

	video descripter
	0d 24 01 00 01 33 00 00 6c dc 02 01 01
	->(
			bDescriptorType    CS_INTERFACE
			bDescriptorSubtype VC_HEADER
			bcdUVC             1.0
			dwClockFrequency   48MHz
			bInCollection      1
			baInterfaceNr(1)   1
	  )


	video descripter
	12 24 02 01 01 02 00 00 00 00
	00 00 00 00 03 00 00 00 
	->(
			bDescriptorType    CS_INTERFACE
			bDescriptorSubtype VC_INPUT_TERMINAL
			bTerminalID  1
	  )

	voideo descripter
	0b 24 05 02 01 00 00 02 3f 05 00   
	->(
			bDescriptorType    CS_INTERFACE
			bDescriptorSubtype VC_PROCESSING_UNIT
	  )


	video descripter
	09 24 03 03 01 01 00 02 00 
	->(
			bDescriptorType  CS_INTERFACE
			bDescriptorSubtype VC_OUTPUT_TERMINAL
			bTerminalID 3
	  )

	Endpoint descriptor
	07 05 81 03 0a 00 05
	->(
		 1IN
		 Interrupt
		 MaxPackSize 10 Bytes
		 bInterval   5  frame
	  )

	voideo descriptor 
	05 25 03 0a 00 
	->(
			bDescriptorType    CS_ENDPOINT
			bDescriptorSubtype EP_INTERRUPT
			wMaxTransferSize   10 bytes
	  )

/*-----------------------------------------------------------------------------------------*/


	Interface descriptor
	09 04 01 00 00 0e 02 00 00 
	->(
			bDescriptorType INTERFACE
			bInterfaceNumber 1
			bNumEndpoints    0
			bInterfaceClass  video
			bInterfaceSubClass video Streaming
	  )

	video descriptor 
	0e 24 01 01 e3 00 82 00 03 02
	01 01 01 00
	->(
			bDescriptorType    CS_INTERFACE
			bDescriptorSubtype VS_INPUT_HEADER
	  )

	video descriptor
	1b 24 04 01 05 59 55 59 32 00 
	00 10 00 80 00 00 aa 00 38 9b 
	71 10 01 00 00 00 00 
	->(
			bDescriptorType CS_INTERFACE
			bDescriptorSubtype VS_FORMAT_UNCOMPRESSED
	  )


	video descriptor
	22 24 05 01 00 80 02 E0 01 00 
	00 65 04 00 00 CA 08 00 60 09
	00 15 16 05 00 02 15 16 05 00 
	2B 2C 0A 00 
	->(
			bDescriptorType CS_INTERFACE
			bDescriptorSubtype VS_FRAME_UNCOMPRESSED
			bFramIndex     1
			640*480
			dwMaxVideoFrameBufferSize 600KB
			bFrameIntervalType 2
	  )


	video descripter
	22 24 05 02 00 60 01 20 01 00 
	40 73 01 00 80 E6 02 00 18 03
	00 15 16 05 00 02 15 16 05 00 
	2B 2C 0A 00 
	->(
			bDescriptorType CS_INTERFACE
			bDescriptorSubtype  VS_FRAME_UNCOMPRESSED
			bFramIndex     2
			352*288
			dwMaxVideoFrameBufferSize 198K
	  )

	video descriptor
	22 24 05 03 00 40 01 F0 00 00 
	40 19 01 00 80 32 02 00 58 02 
	00 15 16 05 00 02 15 16 05 00 
	2B 2C 0A 00 
	->(
			bDescriptorType     CS_INTERFACE
			bDescriptorSubtype  CS_FRAME_UNCOMPRESSED
			bFramIndex  3
			320*240
			dwMaxVideoFrameBufferSize 150K
	  )

	video Descriptor
	22 24 05 04 00 B0 00 90 00 00 
	D0 5C 00 00 A0 B9 00 00 C6 00 
	00 15 16 05 00 02 15 16 05 00 
	2B 2C 0A 00 
	->(
			bDescriptorType     CS_INTERFACE
			bDescriptorSubtype  CS_FRAME_UNCOMPRESSED
			bFramIndex  4
			176*144
			dwMaxVideoFrameBufferSize 49.5K
	  )

	video descriptor
	22 24 05 05 00 A0 00 78 00 00
	50 46 00 00 A0 8C 00 00 96 00 
	00 15 16 05 00 02 15 16 05 00 
	2B 2C 0A 00 

	->(
			bDescriptorType     CS_INTERFACE
			bDescriptorSubtype  CS_FRAME_UNCOMPRESSED
			bFramIndex  5
			160*120
			dwMaxVideoFrameBufferSize 37.5k
	  )

	video descriptor
	0A 24 03 00 01 80 02 E0 01 00 
	->(
			bDescriptorType   CS_INTERFACE
			bDescriptorSubtype  VS_STILL_IMAGE_FRAME
			640*480
	  )


	video descriptor
	06 24 0D 00 00 00 
	->(
			bDescriptorType     CS_INTERFACE
			bDescriptorSubtype  VS_COLORFORMAT
	  )


/*-----------------------------------------------------------------------------------------*/
	interface Descriptor
	09 04 01 01 01 0E 02 00 00 
	->(
			bDescriptorType    INTERFACE 
			bNumEndpoints      1
			bInterfaceClass    Video
			bInterfaceSubClass video Streaming
	  )


	endpoint Descriptor
	07 05 82 05 00 14 01
	->(
			bDescriptorType    Endpoint 
			2In 
			iso
			wMaxPacketSize    5K
			bInterval         1 frame
	  )




/*-----------------------------------------------------------------------------------------*/
	Interface Association descriptor
	08 0B 02 02 01 02 00 04 
	->(
			bDescriptorType   INTERFACE_ASSOCIATION
			binterfacecount   2
			bFunctionClass    audio
			bFunctionSubClass streaming
	  )
	
	interface Descriptor
	09 04 02 00 00 01 01 00 04
	->(
			bInterfaceNumber 2
			bInterfaceClass   Audio
			bInterfaceSubClass Control Device
	  )

	audio descriptor
	09 24 01 00 01 27 00 01 03 
	->(
			bDescriptorType CS_INTERFACE
			bDescriptorSubtype HEADER
	  )




	audio descriptor
	0C 24 02 01 01 02 00 01 00 00 00 00 
	->(
			bDescriptorType CS_INTERFACE
			bDescriptorSubtype INPUT_TERMINAL
	  )

	audio descriptor
	09 24 06 02 01 01 00 03 00 
	->(
			bDescriptorType CS_INTERFACE
			bDescriptorSubtype FEATURE_UNIT
	  )

	audio descriptor
	09 24 03 03 01 01 01 02 00 
	->(
			bDescriptorType CS_INTERFACE
			bDescriptorSubtype OUTPUT_TERMINAL
	  )

	interface descriptor
	09 04 03 00 00 01 02 00 00 

	interface descriptor
	09 04 03 01 01 01 02 00 00 


	audio descriptor
	07 24 01 03 01 01 00
	->(
			bDescriptorType    CS_INTERFACE
			bDescriptorSubtype EP_GENERAL
	  )

	audio Descriptor
	0B 24 02 01 01 02 10 01 80 BB 00 
	->(
			bDescriptorType    CS_INTERFACE
			bDescriptorSubtype FORMAT_TYPE
	  )

	endpoint descriptor
	09 05 83 01 80 00 04 00 00
	->(
			wMaxPacketSize 128k
			bInterval      4frame
			
			)

	audio descriptor
	07 25 01 01 00 00 00 
	->(
		bDescriptorType     CS_ENDPOINT	
		bDescriptorSubtype  EP_GENERAL
	  )
/*-----------------------------------------------------------------------------------------*/
配置描述符体现
1.收先有IAD，说明他有多个功能接口，是个复合设备。
2.配置描述符集合
video control接口
(  
     VC_HEADER
     VC_INPUT_TERMINAL
     VC_PROCESSING_UNIT
	 VC_EXTENSION_UNIT
     VC_OUTPUT_TERMINAL
     ENPOINT 
     CS_ENDPOINT ？
)

video Streaming接口
(
	VS_INPUT_HEADER
	VS_FORMAT_MJPEG
	VS_FRAME_MJPEG(1,2,3,4)
	VS_STILL_IMAGE_FRAME
	VS_COLORFORMAT

	VS_FORMAT_UNCOMPRESSED(1,2,3,4,5)
	VS_STILL_IMAGE_FRAME
	VS_COLORFORMAT
	ENDPOINT
	INTERFACE ?为什么重复了
)

